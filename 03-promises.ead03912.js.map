{"mappings":"iiBAiBA,IAAAA,EAAAC,EAAA,SACMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UA8B/B,SAASI,EAAcC,EAAUP,GAC/B,IAAMQ,EAAgBC,KAAKC,SAAW,GAChCC,EAAU,CAAEJ,WAAUP,SAC5B,OAAO,IAAIY,SAAQ,SAACC,EAAKC,GACnBN,EACFK,EAAIF,GACCG,EAAIH,E,IAjCfZ,EAAKM,KAAKU,iBAAiB,UAE3B,SAAoBC,GAClBA,EAAIC,iBAKJ,IAJA,IAAIC,EAAQC,OAAOpB,EAAKC,MAAMoB,OACxBjB,EAAOgB,OAAOpB,EAAKI,KAAKiB,OACxBhB,EAASe,OAAOpB,EAAKK,OAAOgB,OAEzBC,EAAW,EAAGA,GAAYjB,EAAQiB,GAAY,EACrDf,EAAce,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUP,EAAKuB,EAALvB,MACjBwB,YAAW,WACTC,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAAN5B,EAAM,M,GACrEA,E,IAEJ6B,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUP,EAAKuB,EAALvB,MAClBwB,YAAW,WACTC,EAAA5B,GAAS6B,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAAN5B,EAAM,M,GAClEA,E,IAGPkB,GAASf,EAGXa,EAAIe,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["/*HTML містить розмітку форми, в поля якої користувач буде вводити\n першу затримку в мілісекундах, крок збільшення затримки для кожного\n  промісу після першого і кількість промісів, яку необхідно створити. \n  Напиши скрипт, який на момент сабміту форми викликає функцію \n  createPromise(position, delay) стільки разів, скільки ввели в поле \n  amount. Під час кожного виклику передай їй номер промісу (position),\n   що створюється, і затримку, враховуючи першу затримку (delay), \n   введену користувачем, і крок (step).\n\n   Доповни код функції createPromise таким чином, щоб вона повертала \n   один проміс, який виконується або відхиляється через delay часу. \n   Значенням промісу повинен бути об'єкт, в якому будуть властивості \n   position і delay зі значеннями однойменних параметрів. \n   Використовуй початковий код функції для вибору того, що потрібно\n    зробити з промісом - виконати або відхилити.\n  */\n\nimport Notiflix from 'notiflix';\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', funcSubmit);\n\nfunction funcSubmit(evn) {\n  evn.preventDefault();\n  let delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n\n    delay += step;\n  }\n\n  evn.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = { position, delay };\n  return new Promise((res, rej) => {\n    if (shouldResolve) {\n      res(promise);\n    } else rej(promise);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","promise","Promise","res","rej","addEventListener","evn","preventDefault","delay1","Number","value","position1","then","param","setTimeout","$parcel$interopDefault","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.ead03912.js.map"}